<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mass Spec Scheduling System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        .fc .fc-toolbar-title {
            font-size: 1.25rem;
            font-weight: 600;
        }
        .fc .fc-button {
            background-color: #4f46e5;
            border-color: #4f46e5;
            color: white;
        }
        .fc .fc-button:hover {
            background-color: #4338ca;
            border-color: #4338ca;
        }
        .fc .fc-daygrid-day.fc-day-today {
            background-color: #e0e7ff;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 50;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 2rem;
            border: 1px solid #888;
            width: 90%;
            max-width: 500px;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .instrument-color-dot {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .gemini-btn {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            border-radius: 0.375rem;
            background-color: #ede9fe;
            color: #5b21b6;
            font-weight: 500;
            border: 1px solid #c4b5fd;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .gemini-btn:hover {
            background-color: #ddd6fe;
        }
        .loader {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #5b21b6;
            border-radius: 50%;
            width: 14px;
            height: 14px;
            animation: spin 1s linear infinite;
            margin-left: 6px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="text-gray-800">

    <div id="app" class="p-4 md:p-8">
        <!-- Header -->
        <header class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Mass Spec Scheduler</h1>
                <p class="text-gray-600">Welcome, <span id="userName" class="font-semibold">Lab Manager</span></p>
            </div>
            <div class="flex items-center space-x-4">
                 <button id="adminPanelBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition">Admin Panel</button>
                 <button id="logoutBtn" class="bg-gray-200 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-300 transition">Logout</button>
            </div>
        </header>

        <main>
            <!-- Instrument Selection -->
            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-3">Instruments</h2>
                <div id="instrumentList" class="flex flex-wrap gap-4">
                    <!-- Instrument buttons will be dynamically inserted here -->
                </div>
            </div>

            <!-- Calendar View -->
            <div id="calendarContainer" class="bg-white p-6 rounded-lg shadow-md">
                 <div id='calendar'></div>
            </div>
        </main>
    </div>

    <!-- Booking Modal -->
    <div id="bookingModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('bookingModal')">&times;</span>
            <h2 id="bookingModalTitle" class="text-2xl font-bold mb-6">New Booking</h2>
            <form id="bookingForm">
                <input type="hidden" id="bookingId">
                <div class="mb-4">
                    <label for="bookingInstrument" class="block text-sm font-medium text-gray-700 mb-1">Instrument</label>
                    <input type="text" id="bookingInstrument" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" readonly>
                </div>
                <div class="mb-4">
                    <label for="bookingUser" class="block text-sm font-medium text-gray-700 mb-1">User</label>
                    <input type="text" id="bookingUser" value="Lab Manager" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100" readonly>
                </div>
                <div class="mb-4">
                    <label for="startTime" class="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
                    <input type="text" id="startTime" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" required>
                </div>
                <div class="mb-4">
                    <label for="endTime" class="block text-sm font-medium text-gray-700 mb-1">End Time</label>
                    <input type="text" id="endTime" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" required>
                </div>
                 <div class="mb-4">
                    <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">Project Name / Analysis Type</label>
                    <input type="text" id="projectName" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="e.g., Proteomics of yeast lysate" required>
                </div>
                <div class="mb-4">
                    <div class="flex justify-between items-center mb-1">
                        <label for="solvent" class="block text-sm font-medium text-gray-700">Solvent</label>
                        <button type="button" id="suggestSolventBtn" class="gemini-btn">✨ Suggest Solvents</button>
                    </div>
                    <input type="text" id="solvent" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div class="mb-4">
                     <div class="flex justify-between items-center mb-1">
                        <label for="experimentalPlan" class="block text-sm font-medium text-gray-700">Experimental Plan</label>
                        <button type="button" id="generatePlanBtn" class="gemini-btn">✨ Generate Plan</button>
                    </div>
                    <textarea id="experimentalPlan" rows="6" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-50" readonly placeholder="Click 'Generate Plan' for a suggested experimental checklist..."></textarea>
                </div>
                <div class="flex justify-end space-x-4 mt-6">
                    <button type="button" id="deleteBookingBtn" class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition" style="display:none;">Delete</button>
                    <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition">Save Booking</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Admin Panel Modal -->
    <div id="adminModal" class="modal">
        <div class="modal-content !max-w-4xl">
             <span class="close-button" onclick="closeModal('adminModal')">&times;</span>
             <h2 class="text-2xl font-bold mb-6">Admin Panel</h2>
             <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <!-- User Management -->
                <div>
                    <h3 class="text-xl font-semibold mb-4">User Management</h3>
                    <div class="space-y-3 max-h-60 overflow-y-auto" id="userListContainer">
                        <!-- User items will be dynamically inserted here -->
                    </div>
                     <button id="addUserBtn" class="mt-4 bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition">Add User</button>
                </div>
                <!-- Usage Reports -->
                <div>
                    <h3 class="text-xl font-semibold mb-4">Usage Reports</h3>
                    <div class="space-y-2">
                        <p>Select a month to generate a report.</p>
                        <input type="month" id="reportMonth" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        <button id="generateReportBtn" class="mt-2 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition">Generate Report</button>
                    </div>
                    <div id="reportOutput" class="mt-4 p-4 bg-gray-50 rounded-md border hidden"></div>
                </div>
             </div>
        </div>
    </div>
    
    <!-- Add User Modal -->
    <div id="addUserModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('addUserModal')">&times;</span>
            <h2 class="text-2xl font-bold mb-6">Add New User</h2>
            <form id="addUserForm">
                <div class="mb-4">
                    <label for="newUserName" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                    <input type="text" id="newUserName" class="w-full px-3 py-2 border border-gray-300 rounded-md" required>
                </div>
                <div class="mb-4">
                    <label for="newUserEmail" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input type="email" id="newUserEmail" class="w-full px-3 py-2 border border-gray-300 rounded-md" required>
                </div>
                <div class="mb-4">
                    <label for="newUserRole" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                    <select id="newUserRole" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        <option value="Trained User">Trained User</option>
                        <option value="Untrained User">Untrained User</option>
                        <option value="Lab Manager">Lab Manager</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label for="newUserType" class="block text-sm font-medium text-gray-700 mb-1">User Type</label>
                    <select id="newUserType" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        <option value="Internal Academic">Internal Academic</option>
                        <option value="Internal Industry-Sponsored">Internal Industry-Sponsored</option>
                        <option value="External">External</option>
                    </select>
                </div>
                <div class="flex justify-end">
                    <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition">Add User</button>
                </div>
            </form>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // --- DATA ---
            const state = {
                currentUser: { id: 1, name: 'Lab Manager', role: 'Lab Manager', type: 'Internal Academic' },
                instruments: [
                    { id: 'waters', name: 'Waters SYNAPT XS', color: '#8b5cf6' },
                    { id: 'orbi', name: 'Thermo Orbitrap Exploris 480', color: '#3b82f6' }
                ],
                users: [
                    { id: 1, name: 'Lab Manager', email: 'manager@lab.com', role: 'Lab Manager', type: 'Internal Academic' },
                    { id: 2, name: 'Alice', email: 'alice@lab.com', role: 'Trained User', type: 'Internal Academic' },
                    { id: 3, name: 'Bob', email: 'bob@lab.com', role: 'Trained User', type: 'Internal Industry-Sponsored' },
                    { id: 4, name: 'Charlie', email: 'charlie@lab.com', role: 'Untrained User', type: 'External' },
                ],
                bookings: [
                    { id: 'b1', instrumentId: 'orbi', userId: 2, start: '2025-07-28T10:00:00', end: '2025-07-28T12:00:00', title: 'Alice - Project A', project: 'Project A', solvent: 'Methanol', plan: '' },
                    { id: 'b2', instrumentId: 'waters', userId: 3, start: '2025-07-29T14:00:00', end: '2025-07-29T17:00:00', title: 'Bob - Project B', project: 'Project B', solvent: 'Acetonitrile', plan: '' },
                    { id: 'b3', instrumentId: 'orbi', userId: 1, start: '2025-07-30T09:00:00', end: '2025-07-30T11:00:00', title: 'Lab Manager - Maintenance', project: 'Maintenance', solvent: 'N/A', plan: '1. Run diagnostics.\n2. Clean ion source.' },
                ],
                activeInstrumentId: 'waters',
                billingRates: {
                    'Internal Academic': 50,
                    'Internal Industry-Sponsored': 100,
                    'External': 150,
                }
            };

            // --- DOM ELEMENTS ---
            const calendarEl = document.getElementById('calendar');
            const instrumentListEl = document.getElementById('instrumentList');
            const bookingModal = document.getElementById('bookingModal');
            const bookingForm = document.getElementById('bookingForm');
            const adminModal = document.getElementById('adminModal');
            const userListContainer = document.getElementById('userListContainer');
            const addUserModal = document.getElementById('addUserModal');
            const addUserForm = document.getElementById('addUserForm');
            const suggestSolventBtn = document.getElementById('suggestSolventBtn');
            const generatePlanBtn = document.getElementById('generatePlanBtn');

            let calendar;
            let startPicker, endPicker;

            // --- RENDER FUNCTIONS ---
            function renderInstruments() {
                instrumentListEl.innerHTML = '';
                state.instruments.forEach(inst => {
                    const btn = document.createElement('button');
                    btn.innerHTML = `<span class="instrument-color-dot" style="background-color:${inst.color};"></span>${inst.name}`;
                    btn.className = `px-4 py-2 rounded-md transition flex items-center ${state.activeInstrumentId === inst.id ? 'bg-indigo-600 text-white shadow' : 'bg-white text-gray-700 hover:bg-gray-100'}`;
                    btn.onclick = () => {
                        state.activeInstrumentId = inst.id;
                        renderInstruments();
                        renderCalendar();
                    };
                    instrumentListEl.appendChild(btn);
                });
            }

            function renderCalendar() {
                const filteredBookings = state.bookings
                    .filter(b => b.instrumentId === state.activeInstrumentId)
                    .map(b => {
                        const instrument = state.instruments.find(i => i.id === b.instrumentId);
                        return {
                            id: b.id,
                            title: b.title,
                            start: b.start,
                            end: b.end,
                            backgroundColor: instrument.color,
                            borderColor: instrument.color,
                            extendedProps: {
                                userId: b.userId,
                                instrumentId: b.instrumentId,
                                project: b.project,
                                solvent: b.solvent,
                                plan: b.plan
                            }
                        };
                    });

                if (calendar) {
                    calendar.destroy();
                }

                calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'timeGridWeek',
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay'
                    },
                    events: filteredBookings,
                    selectable: true,
                    select: handleDateSelect,
                    eventClick: handleEventClick,
                    initialDate: '2025-07-28',
                    editable: state.currentUser.role === 'Lab Manager',
                    eventDrop: handleEventDrop,
                    eventResize: handleEventResize,
                });
                calendar.render();
            }
            
            function renderUsers() {
                userListContainer.innerHTML = '';
                state.users.forEach(user => {
                    const userDiv = document.createElement('div');
                    userDiv.className = 'flex justify-between items-center p-3 bg-gray-100 rounded-md';
                    userDiv.innerHTML = `
                        <div>
                            <p class="font-semibold">${user.name} <span class="text-sm text-gray-500">(${user.email})</span></p>
                            <p class="text-sm">${user.role} - ${user.type}</p>
                        </div>
                        <button class="text-red-500 hover:text-red-700 font-semibold" onclick="window.app.deleteUser(${user.id})">Remove</button>
                    `;
                    userListContainer.appendChild(userDiv);
                });
            }

            // --- EVENT HANDLERS ---
            function handleDateSelect(selectionInfo) {
                if (state.currentUser.role === 'Untrained User') {
                    alert('You are not authorized to book instruments. Please contact the lab manager for training.');
                    return;
                }
                openBookingModal({
                    start: selectionInfo.startStr,
                    end: selectionInfo.endStr,
                    plan: ''
                });
            }

            function handleEventClick(clickInfo) {
                const booking = state.bookings.find(b => b.id === clickInfo.event.id);
                if (!booking) return;

                if (booking.userId !== state.currentUser.id && state.currentUser.role !== 'Lab Manager') {
                     openBookingModal(booking, true); // Open in read-only mode
                    return;
                }
                openBookingModal(booking);
            }
            
            function handleEventDrop(info) { handleEventMove(info.event); }
            function handleEventResize(info) { handleEventMove(info.event); }
            
            function handleEventMove(event) {
                const bookingIndex = state.bookings.findIndex(b => b.id === event.id);
                if (bookingIndex > -1) {
                    state.bookings[bookingIndex].start = event.start.toISOString();
                    state.bookings[bookingIndex].end = event.end.toISOString();
                    renderCalendar();
                }
            }

            bookingForm.onsubmit = function(e) {
                e.preventDefault();
                const bookingId = document.getElementById('bookingId').value;
                const bookingData = {
                    instrumentId: state.activeInstrumentId,
                    userId: state.currentUser.id,
                    start: startPicker.selectedDates[0].toISOString(),
                    end: endPicker.selectedDates[0].toISOString(),
                    project: document.getElementById('projectName').value,
                    solvent: document.getElementById('solvent').value,
                    plan: document.getElementById('experimentalPlan').value
                };
                bookingData.title = `${state.currentUser.name} - ${bookingData.project}`;

                if (bookingId) {
                    const index = state.bookings.findIndex(b => b.id === bookingId);
                    state.bookings[index] = { ...state.bookings[index], ...bookingData };
                } else {
                    state.bookings.push({ id: `b${Date.now()}`, ...bookingData });
                }
                closeModal('bookingModal');
                renderCalendar();
            };
            
            addUserForm.onsubmit = function(e) {
                e.preventDefault();
                const newUser = {
                    id: state.users.length + 1,
                    name: document.getElementById('newUserName').value,
                    email: document.getElementById('newUserEmail').value,
                    role: document.getElementById('newUserRole').value,
                    type: document.getElementById('newUserType').value,
                };
                state.users.push(newUser);
                renderUsers();
                closeModal('addUserModal');
                addUserForm.reset();
            };
            
            document.getElementById('deleteBookingBtn').onclick = function() {
                const bookingId = document.getElementById('bookingId').value;
                if (confirm('Are you sure you want to delete this booking?')) {
                    state.bookings = state.bookings.filter(b => b.id !== bookingId);
                    closeModal('bookingModal');
                    renderCalendar();
                }
            };
            
            document.getElementById('adminPanelBtn').onclick = () => openModal('adminModal');
            document.getElementById('addUserBtn').onclick = () => openModal('addUserModal');
            document.getElementById('generateReportBtn').onclick = generateReport;
            suggestSolventBtn.onclick = handleSuggestSolvent;
            generatePlanBtn.onclick = handleGeneratePlan;

            // --- MODAL & HELPER FUNCTIONS ---
            function openModal(id) { document.getElementById(id).style.display = 'flex'; }
            window.closeModal = function(id) { document.getElementById(id).style.display = 'none'; }
            
            function openBookingModal(data, readOnly = false) {
                bookingForm.reset();
                const instrument = state.instruments.find(i => i.id === (data.instrumentId || state.activeInstrumentId));
                const user = state.users.find(u => u.id === data.userId) || state.currentUser;
                
                document.getElementById('bookingModalTitle').textContent = data.id ? 'Edit Booking' : 'New Booking';
                document.getElementById('bookingId').value = data.id || '';
                document.getElementById('bookingInstrument').value = instrument.name;
                document.getElementById('bookingUser').value = user.name;
                document.getElementById('projectName').value = data.project || '';
                document.getElementById('solvent').value = data.solvent || '';
                document.getElementById('experimentalPlan').value = data.plan || '';
                
                document.getElementById('deleteBookingBtn').style.display = data.id && !readOnly ? 'block' : 'none';
                
                if(startPicker) startPicker.destroy();
                if(endPicker) endPicker.destroy();
                startPicker = flatpickr("#startTime", { enableTime: true, dateFormat: "Y-m-d H:i", defaultDate: data.start });
                endPicker = flatpickr("#endTime", { enableTime: true, dateFormat: "Y-m-d H:i", defaultDate: data.end });

                Array.from(bookingForm.elements).forEach(el => el.disabled = readOnly);
                bookingForm.querySelector('button[type="submit"]').style.display = readOnly ? 'none' : 'block';
                
                openModal('bookingModal');
            }

            function generateReport() {
                const reportMonthInput = document.getElementById('reportMonth').value;
                if (!reportMonthInput) { alert('Please select a month.'); return; }
                const [year, month] = reportMonthInput.split('-');
                const reportData = {};
                
                state.bookings.forEach(booking => {
                    const bookingDate = new Date(booking.start);
                    if (bookingDate.getFullYear() == year && (bookingDate.getMonth() + 1) == month) {
                        const user = state.users.find(u => u.id === booking.userId);
                        if (!user) return;
                        
                        const duration = (new Date(booking.end) - new Date(booking.start)) / 3600000;
                        const cost = duration * (state.billingRates[user.type] || 0);
                        
                        if (!reportData[user.name]) {
                            reportData[user.name] = { totalHours: 0, totalCost: 0, userType: user.type };
                        }
                        reportData[user.name].totalHours += duration;
                        reportData[user.name].totalCost += cost;
                    }
                });
                
                const reportOutputEl = document.getElementById('reportOutput');
                let reportHTML = `<h4 class="font-bold mb-2">Usage Report for ${reportMonthInput}</h4>`;
                if (Object.keys(reportData).length === 0) {
                    reportHTML += '<p>No usage data for this month.</p>';
                } else {
                    reportHTML += '<table class="w-full text-left text-sm"><thead><tr class="border-b"><th class="py-2">User</th><th>Type</th><th>Hours</th><th>Cost</th></tr></thead><tbody>';
                    for (const userName in reportData) {
                        const data = reportData[userName];
                        reportHTML += `<tr class="border-b"><td class="py-2">${userName}</td><td>${data.userType}</td><td>${data.totalHours.toFixed(2)}</td><td>$${data.totalCost.toFixed(2)}</td></tr>`;
                    }
                    reportHTML += '</tbody></table>';
                }
                
                reportOutputEl.innerHTML = reportHTML;
                reportOutputEl.classList.remove('hidden');
            }
            
            // --- GEMINI API INTEGRATION ---
            async function callGeminiAPI(prompt, button) {
                const originalButtonContent = button.innerHTML;
                button.disabled = true;
                button.innerHTML = '✨ Thinking...<div class="loader"></div>';

                const apiKey = ""; // API key will be handled by the environment
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
                
                const payload = {
                    contents: [{ role: "user", parts: [{ text: prompt }] }]
                };

                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        throw new Error(`API request failed with status ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts.length > 0) {
                        return result.candidates[0].content.parts[0].text;
                    } else {
                        throw new Error("Invalid response structure from API.");
                    }
                } catch (error) {
                    console.error("Gemini API call failed:", error);
                    alert("Sorry, there was an error contacting the AI assistant. Please try again later.");
                    return null;
                } finally {
                    button.disabled = false;
                    button.innerHTML = originalButtonContent;
                }
            }

            async function handleSuggestSolvent(e) {
                const button = e.currentTarget;
                const projectName = document.getElementById('projectName').value;
                if (!projectName) {
                    alert("Please enter a Project Name or Analysis Type first.");
                    return;
                }
                const instrumentName = document.getElementById('bookingInstrument').value;
                const prompt = `For a mass spectrometry experiment on a ${instrumentName} involving "${projectName}", suggest a comma-separated list of 2-3 common mobile phase solvents or solvent systems. Be very concise. For example: Acetonitrile, Water with 0.1% Formic Acid.`;
                
                const suggestion = await callGeminiAPI(prompt, button);
                if (suggestion) {
                    document.getElementById('solvent').value = suggestion.trim();
                }
            }

            async function handleGeneratePlan(e) {
                const button = e.currentTarget;
                const projectName = document.getElementById('projectName').value;
                const solvent = document.getElementById('solvent').value;
                const instrumentName = document.getElementById('bookingInstrument').value;
                const start = startPicker.selectedDates[0];
                const end = endPicker.selectedDates[0];

                if (!projectName || !solvent || !start || !end) {
                    alert("Please fill in Project Name, Solvent, and booking times before generating a plan.");
                    return;
                }
                
                const durationMinutes = Math.round((end - start) / 60000);

                const prompt = `Create a concise, step-by-step experimental checklist for a mass spectrometry run.
                - Instrument: ${instrumentName}
                - Analysis Type: ${projectName}
                - Solvents: ${solvent}
                - Total Time Allotted: ${durationMinutes} minutes
                The plan should be a numbered list of key actions to perform before, during, and after the run within the allotted time. Focus on practical steps.`;

                const plan = await callGeminiAPI(prompt, button);
                if (plan) {
                    document.getElementById('experimentalPlan').value = plan;
                }
            }

            window.app = {
                deleteUser: (userId) => {
                    if (userId === 1) { alert("Cannot delete the primary Lab Manager account."); return; }
                    if (confirm('Are you sure you want to remove this user? This will also remove their bookings.')) {
                        state.users = state.users.filter(u => u.id !== userId);
                        state.bookings = state.bookings.filter(b => b.userId !== userId);
                        renderUsers();
                        renderCalendar();
                    }
                }
            };

            // --- INITIALIZATION ---
            function init() {
                renderInstruments();
                renderCalendar();
                renderUsers();
            }

            init();
        });
    </script>
</body>
</html>
